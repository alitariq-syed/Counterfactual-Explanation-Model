# -*- coding: utf-8 -*-
"""imagenet_preprocessing_example.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18nTtx44HiuYNp6ECy4CqpnChDqBnLCvZ
"""

#%%
import os
import sys
import numpy as np
from skimage.io import imread
from skimage.transform import resize
import matplotlib.pyplot as plt
sys.path.append('..')
import tensorflow as tf
print(tf.__version__)
from tensorflow.keras.preprocessing.image import load_img, img_to_array
#%%
from tensorflow.keras.preprocessing.image import ImageDataGenerator

#from tensorflow.keras.applications.resnet import ResNet50,decode_predictions, preprocess_input
from tensorflow.keras.applications.vgg16 import VGG16,decode_predictions, preprocess_input

#import efficientnet.keras as efn
#from efficientnet.keras import center_crop_and_resize, preprocess_input

## if you use tensorflow.keras: 
# from efficientnet.tfkeras import EfficientNetB0
# from efficientnet.tfkeras import center_crop_and_resize, preprocess_input

#%%
image = imread('panda.jpg')
#image = img_to_array(load_img('00001346_000.png',grayscale = False, color_mode='rgb',target_size = (224,224)))
#image = imread('/content/drive/My Drive/dog.jpeg')
#image = imread('/content/drive/My Drive/cat.jpg')

#%%
plt.figure(figsize=(10, 10))
plt.imshow(image)
plt.show()

print(image.min())
print(image.max())
#%%
#from keras.applications.resnet50 import ResNet50
# loading pretrained model
#model = efn.EfficientNetB0(weights='imagenet')
#model = ResNet50(weights='imagenet')
model = VGG16(weights='imagenet')

#%%
use_imageDataGen = 1

if use_imageDataGen:
    imgDataGen = ImageDataGenerator(preprocessing_function = preprocess_input)#rescale = 1./255)
    test_gen = imgDataGen.flow( np.expand_dims(image, 0), batch_size = 32,shuffle= False)
    x = next(test_gen)
    x=resize(x,(1,224,224,3))

else:
    #x = c(image, image_size=image_size)
    x = preprocess_input(image)
    x=resize(x,(224,224,3))
    x = np.expand_dims(x, 0)

#%%
print(np.min(x))
print(np.max(x))
print(np.mean(x))

plt.imshow(x.squeeze())
#%%

# make prediction and decode
y = model.predict(x)
print(decode_predictions(y))
#utils.imgclasses

#giant panda = 388
